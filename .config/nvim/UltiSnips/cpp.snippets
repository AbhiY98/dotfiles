snippet vec2 "2d Vector"
vector<vector<${1:T}>> ${2:name}(${3:size}, vector<$1>(${4:size}));
endsnippet

snippet template "Template"
#include <bits/stdc++.h>

using namespace std;
using ll = long long;

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);
	${0}				
	return 0;
}
endsnippet

snippet templatet "TestCase Template"
#include <bits/stdc++.h>

using namespace std;
using ll = long long;

void solve() {
	${0}
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);
	int tt = 1;
	cin >> tt;
	for(int t = 1; t <= tt; ++t) {
		solve();
	}   
	return 0;
}
endsnippet

snippet tests "Test Cases"
int tt;
cin >> tt;
for(int t = 1; t <= tt; ++t) {
	${0}
}
endsnippet

snippet fenwick "Fenwick Tree"
template <typename T>
class fenwick {
public:
	vector<T> fenw;
	int n;

	fenwick(int _n) : n(_n) {
		fenw.resize(n);
	}

	void modify(int x, T v) {
		while (x < n) {
			fenw[x] += v;
			x |= (x + 1);
		}
	}

	T get(int x) {
		T v{};
		while (x >= 0) {
			v += fenw[x];
			x = (x & (x + 1)) - 1;
		}
		return v;
	}
};
endsnippet

snippet debug "Debugger"
template <typename A, typename B>
string to_string(pair<A, B> p);

template <typename A, typename B, typename C>
string to_string(tuple<A, B, C> p);

template <typename A, typename B, typename C, typename D>
string to_string(tuple<A, B, C, D> p);

string to_string(const string& s) {
	return '"' + s + '"';
}

string to_string(const char* s) {
	return to_string((string) s);
}

string to_string(bool b) {
	return (b ? "true" : "false");
}

string to_string(vector<bool> v) {
	bool first = true;
	string res = "{";
	for (int i = 0; i < static_cast<int>(v.size()); i++) {
		if (!first) {
			res += ", ";
		}
		first = false;
		res += to_string(v[i]);
	}
	res += "}";
	return res;
}

template <size_t N>
string to_string(bitset<N> v) {
	string res = "";
	for (size_t i = 0; i < N; i++) {
		res += static_cast<char>('0' + v[i]);
	}
	return res;
}

template <typename A>
string to_string(A v) {
	bool first = true;
	string res = "{";
	for (const auto &x : v) {
		if (!first) {
			res += ", ";
		}
		first = false;
		res += to_string(x);
	}
	res += "}";
	return res;
}

template <typename A, typename B>
string to_string(pair<A, B> p) {
	return "(" + to_string(p.first) + ", " + to_string(p.second) + ")";
}

template <typename A, typename B, typename C>
string to_string(tuple<A, B, C> p) {
	return "(" + to_string(get<0>(p)) + ", " + to_string(get<1>(p)) + ", " + to_string(get<2>(p)) + ")";
}

template <typename A, typename B, typename C, typename D>
string to_string(tuple<A, B, C, D> p) {
	return "(" + to_string(get<0>(p)) + ", " + to_string(get<1>(p)) + ", " + to_string(get<2>(p)) + ", " + to_string(get<3>(p)) + ")";
}

void debug_out() { cerr << endl; }

template <typename Head, typename... Tail>
void debug_out(Head H, Tail... T) {
	cerr << " " << to_string(H);
	debug_out(T...);
}

#ifdef DEBUG 
#define debug(...) cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)
#else
#define debug(...) 42
#endif
endsnippet

snippet trace "Trace"
#ifdef DEBUG
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
	cerr << name << " : " << arg1 << std::endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
	const char* comma = strchr(names + 1, ',');cerr.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}
#else
#define trace(...)
#endif
endsnippet

snippet segt "Iterative SegTree"
template<class T, int SZ> struct Seg { // SZ should be power of 2
	T seg[2 * SZ], ID = 0;

	Seg() {
		for(int i = 0; i < 2 * SZ; ++i) seg[i] = ID;
	}

	T comb(T a, T b) {
			return max(a, b);
	}
	// easily change this to min or max
	// comb(ID,b) must equal b

	void build() { 
		for(int i = SZ - 1; i >= 0; --i) { 
			seg[i] = comb(seg[2*i],seg[2*i+1]); 
		} 
	}

	void upd(int p, T value) {  // set value at position p
		for (seg[p += SZ] = value; p > 1; p >>= 1)
			seg[p >> 1] = comb(seg[(p|1)^1], seg[p|1]);
			// make sure non-commutative operations work
	}

	T query(int l, int r) {  // query on interval [l, r]
		T res1 = ID, res2 = ID; r++;
		for (l += SZ, r += SZ; l < r; l >>= 1, r >>= 1) {
			if (l&1) res1 = comb(res1, seg[l++]);
			if (r&1) res2 = comb(seg[--r], res2);
		}
		return comb(res1, res2);
	}
};
endsnippet

snippet segtree "Old SegTree"
class SegTree {
public:
	struct Node {
		// don't forget to set default value (used for leaves)
		// not necessarily neutral element!
		int x = 0;
		int add = 0;
		void apply(int val){
			x = val;
		}
		void update(int val){
			x += val;
		}
	};
private:
	vector<Node> tree;
	int N , n;

	// for lazy propogation
	inline void push(int x , int l , int r){
		if(tree[x].add != 0){
			tree[x].update(tree[x].add);
			if(l != r){
				int cover = (r - l + 1);
				tree[x << 1].add += (tree[x].add);
				tree[(x << 1)|1].add += (tree[x].add);
			}
			tree[x].add = 0;
		}
	}

	Node combine(const Node &A , const Node &B){
		Node ans;
		ans.x = max(A.x , B.x);
		return ans;
	}

	void build(int s , int e , int idx) {
		if(s == e){
			tree[idx].apply(0);
			return;
		}
		int mid = (s+e) >> 1;
		build(s , mid , (idx << 1));
		build(mid + 1 , e , ((idx << 1)|1));
		return;
	}

	template <typename T>
	void build(const vector < T > &ar , int s , int e , int idx) {
		if(s == e){
			tree[idx].apply(ar[s]);
			return;
		}
		int mid = (s+e) >> 1;
		build(ar , s , mid , (idx << 1));
		build(ar , mid + 1 , e , ((idx << 1)|1));
		tree[idx] = combine(tree[idx << 1] , tree[(idx << 1)|1]);
		return;
	}

	Node query(int s , int e , int lf , int rf , int idx) {
		push(idx , s , e);
		if(rf < s or e < lf) return Node();
		if(lf <= s and e <= rf){
			return tree[idx];
		}
		int mid = (s + e) >> 1;
		int l = idx << 1;
		int r =  (idx << 1) | 1;
		if(lf <= mid){
			if(rf <= mid){
				return query(s , mid , lf , rf , l);
			}else{
				return combine(query(s , mid , lf , rf , l) , query(mid + 1 , e , lf , rf , r));
			}
		}else{
			return query(mid + 1 , e , lf , rf , r);
		}
	}

	template <typename M>
	void update(int s , int e , int i , M val , int idx) {
		if(s > i or e < i) return;
		if(s == e){
			tree[idx].apply(val);
			return;
		}
		int mid = (s + e) >> 1;
		update(s , mid , i , val , (idx << 1));
		update(mid + 1 , e , i , val , (idx << 1)|1);
		tree[idx] = combine(tree[idx << 1] , tree[(idx << 1) | 1]);
		return;
	}

	template <typename M>
	void update(int s , int e , int l , int r , M val , int idx) {
		push(idx , s , e);
		if(s > r or e < l or s > e) return;
		if(l <= s && e <= r){
			tree[idx].add += val;
			push(idx , s , e);
			return;
		}
		int mid = (s + e) >> 1;
		update(s , mid , l , r , val , (idx << 1));
		update(mid + 1 , e , l , r , val , (idx << 1)|1);
		tree[idx] = combine(tree[idx << 1] , tree[(idx << 1) | 1]);
		return;
	}

public:
	template<typename T>
	SegTree(const vector<T> &ar) {
		n = (int) ar.size();
		N = 4*(n) + 1;
		tree.resize(N, {});
		build(ar , 0 , n - 1 , 1);
	}

	SegTree(int _n) : n (_n){
		N = 4 * (n) + 1;
		tree.resize(N , {});
		build(0 , n - 1 , 1);
	}

	SegTree(){
		n = 100000;
		N = 4 * n + 1;
		tree.resize(N , {});
	}

	void build(){
		build(0 , n - 1 , 1);
	}

	template<typename T>
	void build(const vector<T> &ar) {
		build(ar , 0 , n - 1 , 1);
	}

	Node query(int l ,int r){
		return query(0 , n - 1 , l , r , 1);
	}

	template<typename T>
	void update(int l , int r , T val){
		update(0 , n - 1 , l , r , val , 1);
	}

	template<typename M>
	void update(int i , M val) {
		update(0 , n - 1 , i , val , 1);
	}
};
endsnippet

snippet math "Math Operations"
const int MOD = 998244353;
inline int add(int a, int b) { a += b; if (a >= MOD) a -= MOD; return a; }
inline int sub(int a, int b) { a -= b; if (a < 0) a += MOD; return a; }
inline int mul(int a) { return a; }
template<typename... T> inline int mul(int a, T... b) { return (int) ((ll) a * (ll) mul(b...) % MOD); }
inline int power(int a, int b) {
	int res = 1;
	while (b) {
		if (b & 1) {
			res = mul(res, a);
		}
		a = mul(a, a);
		b >>= 1;
	}
	return res;
}

inline int inv(int a) {
	a %= MOD;
	if (a < 0) a += MOD;
	int b = MOD, u = 0, v = 1;
	while (a) {
		int t = b / a;
		b -= t * a; swap(a, b);
		u -= t * v; swap(u, v);
	}
	assert(b == 1);
	if (u < 0) u += MOD;
	return u;
}
endsnippet

snippet begin "begin"
${1:ar}.begin(), $1.end()
endsnippet

snippet convexhull "ConvexHull"
namespace geo {
	struct point {
		int x , y;
	};
	
	bool operator < (point a, point b) {
		return a.x < b.x || (a.x == b.x && a.y < b.y);
	}

	bool cw(point a, point b, point c) { //clockwise
		return a.x * (b.y - c.y) + b.x * (c.y - a.y) + c.x * (a.y-b.y) < 0;
	}

	bool ccw(point a, point b, point c) { //counter-clockwise
		return a.x * (b.y - c.y) + b.x * (c.y - a.y) + c.x * (a.y - b.y) > 0;
	}
}

using namespace geo;

vector<point> convex_hull(vector<point> a) {
	if (a.size() == 1)
		return a;
	sort(a.begin(), a.end());
	point p1 = a[0], p2 = a.back();
	vector<point> up, down;
	up.push_back(p1);
	down.push_back(p1);
	for (int i = 1; i < (int)a.size(); i++) {
		if (i == (int) a.size() - 1 || cw(p1, a[i], p2)) {
			while (up.size() >= 2 && !cw(up[up.size()-2], up[up.size()-1], a[i]))
				up.pop_back();
			up.push_back(a[i]);
		}
		if (i == (int) a.size() - 1 || ccw(p1, a[i], p2)) {
			while(down.size() >= 2 && !ccw(down[down.size()-2], down[down.size()-1], a[i]))
				down.pop_back();
			down.push_back(a[i]);
		}
	}
	vector<point> ans;
	for (int i = 0; i < (int)up.size(); i++)
		ans.push_back(up[i]);
	for (int i = (int) down.size() - 2; i > 0; i--)
		ans.push_back(down[i]);
	return ans;
}
endsnippet

snippet dsu "Disjoint Set"
template <typename T>
class dsu {
public:
	vector<T> p;
	vector<T> rank;
	int n;

	dsu(int _n) : n(_n) {
		p.resize(n);
		rank.resize(n, 1);
		iota(p.begin(), p.end(), 0);
	}

	inline T get(T x) {
		return (x == p[x] ? x : (p[x] = get(p[x])));
	}

	inline bool unite(T x, T y) {
		T px = get(x), py = get(y);
		if(px == py) return false;
		if(rank[px] < rank[py]) swap(px, py);
		if(rank[px] == rank[py]) rank[px]++;
		p[py] = px;
		return true;
	}
};
endsnippet

snippet dijkstra "SSPA"
template <typename T>
using minpq = priority_queue<T, vector<T>, greater<T>>;
const ll inf = (ll) (1e18);

void dijkstra(int S) {
	ll u, vv, c, w;
	minpq<pair<ll, ll>> Q;
	fill(dist.begin(), dist.end(), inf);
	Q.push({0, S});
	dist[S] = 0;
	while(!Q.empty()) {
		u = Q.top().second;
		c = Q.top().first;
		Q.pop();
		if(dist[u] < c) {
			continue;
		}
		for(int i = 0 ; i < (int) G[u].size() ; i++) {
			w = G[u][i].first;
			vv = G[u][i].second;
			if(dist[vv] > dist[u] + w) {
				dist[vv] = dist[u] + w;
				Q.push({dist[vv], vv});
			}
		}
	}
}
endsnippet

snippet dbg "Debug Out"
#ifdef DEBUG
#define _GLIBCXX_DEBUG
#include "../debug.h"
#else
#define debug(...) 42
#define cerr if(0) cout
#define endl '\n'
#endif
endsnippet

snippet eulerphi "Totient Function"
template<typename T>
T phi(T n){
	double res = n;
	for(int p = 2 ; p*p <= n ; ++p){
		if(n % p == 0){
			while(n % p == 0) {
				n /= p;
			}
			res -= res/p;
		}
	}
	if(n > 1){
		res -= res / n;
	}
	return (T) res;
}
endsnippet

snippet exgcd "Extended Eucledian"
template <typename T>
T gcdE(T a , T b , T &x , T &y){
	if(a == 0){
		*x = 0;
		*y = 1;
		return b;
	}
	T x1 , y1;
	T gcd = gcdE(b%a , a , &x1 , &y1);
	x = y1 - (b/a)*x1;
	y = x1;
	return gcd;
}
endsnippet

snippet fenwick2d "2d fenwick"
template <typename T>
class fenwick{
	vector<vector<T>> tree;
	int n;
public:
	fenwick(int _n) : n(_n){
		tree.resize(n + 1 , vector <T>(n + 1,0));
	}

	void modify(int x , int y , T val){
		for(int i = x ; i <= n ; i += (i&-i)){
			for(int j = y ; j <= n ; j += (j&-j)){
				tree[i][j] += val;
			}
		}
	}

	T query(int x , int y){
		T res = 0;
		for(int i = x ; i ; i -= (i&-i)){
			for(int j = y ; j ; j-= (j&-j)){
				res += tree[i][j];
			}
		}
		return res;
	}

	T query(int x1 , int y1 , int x2 , int y2){
		return (query(x2,y2) - query(x2,y1-1) - query(x1-1,y2) + query(x1-1,y1-1));
	}
};
endsnippet

snippet hashing "hashing"
// code credit : https://www.codechef.com/viewsolution/18660185
typedef long long lint;
const int maxn = 400001;
const int mod = 1004669333, base = 33, inv_base = 121778101;
vector<int> base_pow(maxn + 1), inv_base_pow(maxn + 1);
void prep() {
	base_pow[0] = 1;
	for (int i = 1; i <= maxn; ++i)
		base_pow[i] = (lint)base_pow[i - 1] * base % mod;
	inv_base_pow[0] = 1;
	for (int i = 1; i <= maxn; ++i)
		inv_base_pow[i] = (lint)inv_base_pow[i - 1] * inv_base % mod;
}
struct hashes_t {
	string s;
	int n;
	vector<int> acc_hash, acc_inv_hash;
	hashes_t(const string &_s): s(_s), n(s.size()), acc_hash(n + 1, 0)
		, acc_inv_hash(n + 1, 0) {
		for (int i = 0; i < n; ++i) {
			acc_hash[i + 1] =
				(acc_hash[i] + (lint)base_pow[i] * (s[i] - 'a' + 1)) % mod;
			acc_inv_hash[i + 1] =
				(acc_inv_hash[i] + (lint)inv_base_pow[i] * (s[i] - 'a' + 1)) % mod;
		}
	}
	int get_hash(int a, int b) {
		int hash = acc_hash[b + 1] - acc_hash[a];
		if (hash < 0) hash += mod;
		hash = (lint)hash * inv_base_pow[a] % mod;
		return hash;
	}
	int get_inv_hash(int a, int b) {
		int hash = acc_inv_hash[b + 1] - acc_inv_hash[a];
		if (hash < 0) hash += mod;
		hash = (lint)hash * base_pow[b] % mod;
		return hash;
	}
};
endsnippet

snippet kmp "Knuth Morris Pratt"
template <typename T>
vector<int> kmp_table(int n, const T &s) {
	vector<int> p(n, 0);
	int k = 0;
	for (int i = 1; i < n; i++) {
		while (k > 0 && !(s[i] == s[k])) {
			k = p[k - 1];
		}
		if (s[i] == s[k]) {
			k++;
		}
		p[i] = k;
	}
	return p;
}

template <typename T>
vector<int> kmp_table(const T &s) {
	return kmp_table((int) s.size(), s);
}

template <typename T>
vector<int> kmp_search(int n, const T &s, int m, const T &w, const vector<int> &p) {
	assert(n >= 1 && (int) p.size() == n);
	vector<int> res;
	int k = 0;
	for (int i = 0; i < m; i++) {
		while (k > 0 && (k == n || !(w[i] == s[k]))) {
			k = p[k - 1];
		}
		if (w[i] == s[k]) {
			k++;
		}
		if (k == n) {
			res.push_back(i - n + 1);
		}
	}
	return res;
	// returns 0-indexed positions of occurrences of s in w
}

template <typename T>
vector<int> kmp_search(const T &s, const T &w, const vector<int> &p) {
	return kmp_search((int) s.size(), s, (int) w.size(), w, p);
}
endsnippet

snippet LCA "Least Common Ancestor"
const int MAXN = 200010;
const int LG = 20;
vector<vector<int>> g(MAXN);
vector<vector<int>> par(MAXN, vector<int>(LG, -1));
vector<int> dep(MAXN);

void dfs(int u, int p) {
	if(p == -1) dep[u] = 0;
	else dep[u] = dep[p] + 1;
	par[u][0] = p;
	for(int x: g[u]) if(x != p) {
		dfs(x, u);
	}
}

void precompute() {
	for(int k = 1; k < LG; ++k) {
		for(int i = 0; i < MAXN; ++i) {
			if(par[i][k - 1] != -1) {
				par[i][k] = par[par[i][k - 1]][k - 1];
			}
		}
	}
}

int walk(int u, int k) {
	for(int i = 0; i < LG && u != -1; ++i) {
		if((k >> i) & 1) {
			assert(u != -1);
			u = par[u][i];
		}
	}
	return u;
}

int LCA(int u, int v) {
	if(dep[u] < dep[v]) {
		v = walk(v, dep[v] - dep[u]);
	}
	if(dep[v] < dep[u]) {
		u = walk(u, dep[u] - dep[v]);
	}
	if(u == v) {
		return u;
	}
	for(int i = LG - 1; i >= 0; --i) {
		if(par[u][i] != par[v][i]) {
			u = par[u][i];
			v = par[v][i];
		}
	}
	return par[u][0];
}

int dist(int u, int v) {
	int L = LCA(u, v);
	return dep[u] + dep[v] - 2 * ((L + 1) ? dep[L] : 0);
}
endsnippet

snippet matrix "Matrix"
const int SZ = 3;
const int mod = int(1e9 + 7);

struct vec {
	int arr[SZ];
	void reset(){
		memset(arr , 0 , sizeof(arr));
	}
};

template<int _SZ>
struct matrix {
	int SZ = _SZ;
	vector<vector<int>> arr;
	
	matrix() {
		arr.resize(SZ, vector<int>(SZ));
	}

	void reset() {
		for(auto &x: arr) fill(x.begin(), x.end(), 0);
		// memset(arr , 0 , sizeof(arr));
	}

	void makeiden(){
		reset();
		for(int i = 0 ; i < SZ ; ++i){
			arr[i][i] = 1;
		}
	}

	matrix operator + (const matrix &o) const {
		matrix res;
		for(int i = 0 ; i < SZ ; ++i){
			for(int j = 0 ; j < SZ ; ++j){
				res.arr[i][j] = arr[i][j] + o.arr[i][j];
				res.arr[i][j] -= (res.arr[i][j] >= mod) * mod;
			}
		}
		return res;
	}

	matrix operator * (const matrix &o) const {
		matrix res;
		for(int i = 0 ; i < SZ ; ++i){
			for(int j = 0 ; j < SZ ; ++j){
				res.arr[i][j] = 0;
				for(int k = 0 ; k < SZ ; ++k){
					res.arr[i][j] = (res.arr[i][j] + 1LL * arr[i][k] * o.arr[k][j]) % mod;
				}
			}
		}
		return res;
	}

	vec operator * (const vec &o) const {
		vec res;
		for(int i = 0 ; i < SZ ; ++i){
			res.arr[i] = 0;
			for(int k = 0 ; k < SZ ; ++k){
				res.arr[i] = (res.arr[i] + 1LL * arr[i][k] * o.arr[k]) % mod;
			}
		}
		return res;
	}
};
endsnippet


snippet miller "Miller Rabin Test"
using ll = long long;

ll power(ll n , ll p , ll MOD){
	ll ans = 1;
	n %= MOD;
	for(;p;p>>=1){
		if(p&1){
			ans = (ans*n)%MOD;
		}
		n = (n*n)%MOD;
	}
	return ans;
}
bool miillerTest(ll d, ll n) {
	ll a = 2 + rand() % (n - 4);
	ll x = power(a, d, n);
	if (x == 1  || x == n-1)
		return true;
	while (d != n-1) {
		x = (x * x) % n;
		d *= 2;
		if (x == 1)      return false;
		if (x == n-1)    return true;
	}
	return false;
}

bool isPrime(ll n, ll k) {
	if (n <= 1 || n == 4)  return false;
	if (n <= 3) return true;
	ll d = n - 1;
	while (d % 2 == 0)
			d /= 2;
	for (ll i = 0; i < k; i++)
	if (miillerTest(d, n) == false)
		return false;
	return true;
}
endsnippet

snippet ptrie "Persistent Trie"
// code credit : https://www.codechef.com/viewsolution/23850895
namespace persistentTrie {
	const int MAXN = 200007, LOG = 22;
	int root[MAXN], availNode = 0;

	struct node {
		int ara[2], sum;
		node() {}
	} tree[MAXN * LOG];

	void insert(int prevnode, int &curRoot, int val) {
		curRoot = ++availNode;
		int curnode = curRoot;
		for(int i = 20; i >= 0; i--) {
			bool bit = val & (1 << i);
			tree[curnode] = tree[prevnode];
			tree[curnode].ara[bit] = ++availNode;
			tree[curnode].sum += 1;
			prevnode = tree[prevnode].ara[bit];
			curnode = tree[curnode].ara[bit];
		}
		tree[curnode] = tree[prevnode];
		tree[curnode].sum += 1;
	}
	int find_xor_max(int prevnode, int curnode, int x) {
		int ans = 0;
		for(int i = 20; i >= 0; i--) {
			bool bit = x & (1 << i);
			if(tree[tree[curnode].ara[bit ^ 1]].sum > tree[tree[prevnode].ara[bit ^ 1]].sum) {
				curnode = tree[curnode].ara[bit ^ 1];
				prevnode = tree[prevnode].ara[bit ^ 1];
				ans = ans | (1 << i);
			}
			else {
				curnode = tree[curnode].ara[bit];
				prevnode = tree[prevnode].ara[bit];
			}
		}
		return ans;
	}
	// USAGE
	// inline void solve() {
		// insert(root[0], root[0], 0);
		// int n;
		// input(n);
		// for(int i = 1; i <= n; i++) {
			// int val;
			// input(val);
			// insert(root[i - 1], root[i], val);
		// }
		// int q;
		// input(q);
		// while(q--) {
			// int l, r, val;
			// input(l); input(r); input(val);
			// output(find_xor_max(root[l - 1], root[r], val));
			// outchar('\n');
		// }
	// }
} // persistent trie
using namespace persistentTrie;
endsnippet 

snippet psegtree "Persistent SegTree"
struct Node {
	int x;
	Node* l, *r;
	Node(Node* _l = NULL , Node* _r = NULL , int _x = 0) {
		l = _l;
		r = _r;
		x = _x;
	}
};

int ar[N];
Node* versions[N];

void build(Node* tree , int l , int r) {
	if(r < l) return;
	if(l == r) {
		tree->x = ar[l];
		return;
	}
	int mid = (l + r) >> 1;
	tree->l = new Node();
	tree->r = new Node();
	build(tree->l , l , mid);
	build(tree->r , mid + 1 , r);
	tree->x = tree->l->x + tree->r->x;
}

void update(Node* old, Node* curr, int l , int r , int idx , int val) {
	if(idx < l || idx > r || r < l) return;
	if(l == r) {
		curr->x = old->x + val;
		return;
	}
	int mid = (l + r) >> 1;
	if(idx <= mid) {
		curr->r = old->r;
		curr->l = new Node();
		update(old->l , curr->l , l , mid , idx , val);
	} else {
		curr->l = old->l;
		curr->r = new Node();
		update(old->r , curr->r , mid + 1 , r , idx , val);
	}
	curr->x = curr->l->x + curr->r->x;
}

int query(Node* root , int l , int r , int lo , int hi) {
	if(lo > r || hi < l || r < l) return 0;
	if(root == NULL) assert(false);
	if(lo <= l && r <= hi) {
		return root->x;
	}
	int mid = (l + r) >> 1;
	int a = query(root->l , l , mid , lo , hi);
	int b = query(root->r , mid + 1 , r , lo , hi);
	return a + b;
}
endsnippet

snippet factor "Factor Sieve"
const int MAXN = 1e5 + 10;
vector<int> spf(MAXN);

void sieve(){
	iota(spf.begin(), spf.end() , 0);
	for (int i = 4 ; i < MAXN ;  i += 2)
		spf[i] = 2;
	for (int i = 3 ; i * i < MAXN ; i++) {
		if (spf[i] == i) {
			for (int j = i * i; j < MAXN ;  j += i)
				if (spf[j] == j)
					spf[j] = i;
		}
	}
}

vector<int> getF(int x){
	vector<int> factors;
	while (x != 1) {
		factors.push_back(spf[x]);
		x = x / spf[x];
	}
	return factors;
}
endsnippet 

snippet pbds "Policy Based DS"
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

using namespace __gnu_pbds;
template<typename T, class cmp = std::less<T>>
using Tree = tree<T, null_type, cmp, rb_tree_tag, tree_order_statistics_node_update>;
endsnippet


snippet remax "remax"
template<typename T> void remax (T &u, const T &v) {u = (v > u ? v : u);}
template<typename T> void remin (T &u, const T &v) {u = (v < u ? v : u);}
endsnippet

snippet sieve "prime sieve"
vector <int> primes;
void sieve(){
	const int n = 1000010;
	bool prime[n + 1];
	memset(prime, true, sizeof(prime));
	for (int p = 2 ; p * p <= n; ++p) {
		if (prime[p] == true) {
			for (int i = p * 2 ; i <= n ; i += p)
					prime[i] = false;
		}
	}
	for (int p = 2 ; p <= n ; p++)
		if (prime[p])
			primes.push_back(p);
}
endsnippet

snippet trie "Trie"
const int SZ = 26;
struct TrieNode {
	vector<TrieNode*> node;
	int pass = 0;
	TrieNode() {
		pass = 0;
		node.resize(SZ);
		for(int i = 0; i < SZ; ++i) {
			node[i] = nullptr;
		}
	}
};

class Trie {
	TrieNode *root, *temp;
public:
	Trie() {
		root = new TrieNode;
	}

	void add(const string &s) {
		temp = root;
		for(auto &c: s) {
			int x = c - 'a';
			if(temp->node[x] == nullptr) {
				temp->node[x] = new TrieNode;
			}
			temp = temp->node[x];
			temp->pass++;
		}
	}

	int query(const string &s) {
		temp = root;
		for(auto &c: s) {
			int x = c - 'a';
			if(temp->node[x] == nullptr) {
				return 0;
			}
			temp = temp->node[x];
		}
		return (temp ? temp->pass : 0);
	}
};
endsnippet


snippet zalgo "Z algorithm"
// z[i] is the length of the longest common prefix between s and the suffix of s starting at i.
vector<int> z_function(string s) {
	int n = (int) s.length();
	vector<int> z(n);
	for (int i = 1, l = 0, r = 0; i < n; ++i) {
		if (i <= r)
			z[i] = min (r - i + 1, z[i - l]);
		while (i + z[i] < n && s[z[i]] == s[i + z[i]])
			++z[i];
		if (i + z[i] - 1 > r)
			l = i, r = i + z[i] - 1;
	}
	return z;
}
endsnippet


snippet prng "Random"
mt19937 prng(chrono::steady_clock::now().time_since_epoch().count());
int rand(int n) {
	return prng() % n;
}

int rand(int l, int r) {
	return uniform_int_distribution<int>(l, r)(prng);
}
endsnippet

snippet modint "Modint"
template <int T_MOD>
struct ModInt {
	static constexpr int MOD = T_MOD;
private:
	using ll = long long;
	int v;

	static int minv(int a, int m) {
		a %= m;
		if (a < 0) a += m;
		int b = m, u = 0, v = 1;
		while (a) {
			int t = b / a;
			b -= t * a; swap(a, b);
			u -= t * v; swap(u, v);
		}
		assert(b == 1);
		if (u < 0) u += m;
		return u;
	}

public:

	ModInt() : v(0) {}
	template<class T> ModInt(T v_) : v(int(v_ % MOD)) { if (v < 0) v += MOD; }
	explicit operator int() const { return v; }
	friend std::ostream& operator << (std::ostream& out, const ModInt& n) { return out << int(n); }
	friend std::istream& operator >> (std::istream& in, ModInt& n) { ll v_; in >> v_; n = ModInt(v_); return in; }
	friend bool operator == (const ModInt& a, const ModInt& b) { return a.v == b.v; }
	friend bool operator != (const ModInt& a, const ModInt& b) { return a.v != b.v; }

	ModInt inv() const {
		ModInt res;
		res.v = minv(v, MOD);
		return res;
	}

	ModInt neg() const {
		ModInt res;
		res.v = v ? MOD - v : 0;
		return res;
	}

	ModInt operator- () const {
		return neg();
	}

	ModInt operator+ () const {
		return ModInt(*this);
	}

	ModInt& operator ++ () {
		v++;
		if (v == MOD) v = 0;
		return *this;
	}

	ModInt& operator -- () {
		if (v == 0) v = MOD;
		v --;
		return *this;
	}

	ModInt& operator += (const ModInt& o) {
		v += o.v;
		if (v >= MOD) v -= MOD;
		return *this;
	}

	ModInt& operator -= (const ModInt& o) {
		v -= o.v;
		if (v < 0) v += MOD;
		return *this;
	}

	ModInt& operator *= (const ModInt& o) {
		v = int(ll(v) * ll(o.v) % MOD);
		return *this;
	}

	ModInt& operator /= (const ModInt& o) {
		return *this *= o.inv();
	}

	friend ModInt operator ++ (ModInt& a, int) { ModInt r = a; ++a; return r; }
	friend ModInt operator -- (ModInt& a, int) { ModInt r = a; --a; return r; }
	friend ModInt operator + (const ModInt& a, const ModInt& b) { return ModInt(a) += b; }
	friend ModInt operator - (const ModInt& a, const ModInt& b) { return ModInt(a) -= b; }
	friend ModInt operator * (const ModInt& a, const ModInt& b) { return ModInt(a) *= b; }
	friend ModInt operator / (const ModInt& a, const ModInt& b) { return ModInt(a) /= b; }  
};

const int mod = 1000000007;
using Mint = ModInt<mod>;

Mint power(Mint x, int p) {
	Mint ans = Mint(1);
	while(p) {
		if(p & 1) {
			ans *= x;
		}
		x *= x;
		p >>= 1;
	}
	return ans;
}
endsnippet 

snippet sort "sort"
sort(${1:ar}.begin(), $1.end());
endsnippet

snippet SCC "Strongly Connected Components"
int n;
namespace SCC {  
	const int M = 100010;

	vector<vector<int>> g(M), gr(M);
	vector<bool> used;
	vector<int> order, component;

	void dfs1(int u) {
		used[u] = true;
		for(int x: g[u]) if (!used[x]) {
			dfs1(x);
		}
		order.push_back(u);
	}

	void dfs2(int u) {
		used[u] = true;
		component.push_back(u);
		for(int x: gr[u]) if(!used[x]) {
			dfs2(x);
		}
	}

	void add(int u, int v) {
		g[u].push_back(v);
		gr[v].push_back(u);
	}

	void solve() {
		used.assign(n, false);
		for(int i = 0; i < n; ++i) {
			if(!used[i]) dfs1(i);
		}
		fill(used.begin(), used.end(), false);
		for(int i = 0; i < n; ++i) {
			int v = order[n - i - 1];
			if(!used[v]) {
				dfs2(v);
				/* the component is stored in component vector*/
				component.clear();
			}
		}
	}
}
endsnippet

snippet template2 "template2"
#ifdef DEBUG
#define _GLIBCXX_DEBUG
#endif

#include <bits/stdc++.h>

using namespace std;

typedef long double ld;
typedef long long ll;
typedef double dl;

#ifdef DEBUG
#include "../debug.h"
#else
#define debug(...) 42
#define cerr if(0) cout
#define endl '\n'
#endif

#define PB push_back
#define EB emplace_back
#define MP make_pair
#define SZ(x) ((int) (x).size())
#define ALL(x) (x).begin(), (x).end()

const int inf = (int) 1.01e9;
const ll infll = (ll) 1.01e18;
const ld eps = 1e-9;
const ld pi = acos((ld) -1.0);
const int mod = (int) 1e9 + 7;

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);
	${0}
	return 0;
}
endsnippet

snippet templatea "templatea"
#ifdef DEBUG
#define _GLIBCXX_DEBUG
#endif

#include <bits/stdc++.h>

using namespace std;

typedef long double ld;
typedef double dl;
typedef long long ll;

#ifdef DEBUG
#include "../debug.h"
#define eprintf(...) fprintf(stderr, __VA_ARGS__), fflush(stderr)
#else
#define debug(...) 42
#define cerr if(0) cout
#define eprintf(...) ;
#endif

#define PB push_back
#define MP make_pair
#define sz(x) ((int) (x).size())
#define TASK "input"

const int inf = (int) 1.01e9;
const ll infll = (ll) 1.01e18;
const ld eps = 1e-9;
const ld pi = acos((ld) -1);
const int mod = (int) 1e9 + 7;

#ifdef DEBUG
mt19937 mrand(13);
#else
mt19937 mrand(chrono::steady_clock::now().time_since_epoch().count());
#endif

int rnd(int x) {
	return (int) (mrand() % x);
}

void precalc() {
}

bool read() {
	if(scanf(${0}) < ) {
		return false;
	}
	return true;
}

void solve() {

}

int main() {
	precalc();
#ifdef DEBUG
	assert(freopen(TASK ".in", "r", stdin));
//  assert(freopen(TASK ".out", "w", stdout));
#endif
	while (read()) {
		solve();
#ifdef DEBUG
		eprintf("Time %.2f\n", (double) clock() / CLOCKS_PER_SEC);
#endif
	}
	return 0;
}
endsnippet 

snippet fileio "File Operation"
#ifdef DEBUG
	assert(freopen("in", "r", stdin));
	assert(freopen("out", "w", stdout));
#endif
endsnippet 

snippet sparsetable "Sparse Table"
// usage:
//   auto fun = [&](int i, int j) { return min(i, j); };
//   SparseTable<int, decltype(fun)> st(a, fun);
// or:
//   SparseTable<int> st(a, [&](int i, int j) { return min(i, j); });
template <typename T, class F = function<T(const T&, const T&)>>
class SparseTable {
public:
	int n;
	vector<vector<T>> mat;
	F func;

	SparseTable(const vector<T>& a, const F& f) : func(f) {
		n = static_cast<int>(a.size());
		int max_log = 32 - __builtin_clz(n);
		mat.resize(max_log);
		mat[0] = a;
		for (int j = 1; j < max_log; j++) {
			mat[j].resize(n - (1 << j) + 1);
			for (int i = 0; i <= n - (1 << j); i++) {
				mat[j][i] = func(mat[j - 1][i], mat[j - 1][i + (1 << (j - 1))]);
			}
		}
	}

	T get(int from, int to) const {
		assert(0 <= from && from <= to && to <= n - 1);
		int lg = 32 - __builtin_clz(to - from + 1) - 1;
		return func(mat[lg][from], mat[lg][to - (1 << lg) + 1]);
	}
};
endsnippet

snippet segp "SegTree with Pointers"
struct node {
	node *l, *r;
	ll val, lazy;
	int idx;
};

template<typename T>
node* build(const vector<T> &ar, int l, int r) {
	node* v = new node();
	if(l == r) {
		v->l = v->r = nullptr;
		v->idx = l;
		v->lazy = 0;
		v->val = ar[l];
	} else {
		v->l = build(ar, l, (l + r) / 2);
		v->r = build(ar, (l + r) / 2 + 1, r);
		if(v->r->val <= v->l->val) {
			v->val = v->r->val;
			v->idx = v->r->idx;
		} else {
			v->val = v->l->val;
			v->idx = v->l->idx;
		}
	}
	return v;
}

void push(node* t) {
	if(t->lazy) {
		if(t->l) t->l->lazy += t->lazy;
		if(t->r) t->r->lazy += t->lazy;
		t->val += t->lazy;
		t->lazy = 0;
	}
}

void upd(node* t, int l, int r, int lq, int rq, ll v) {
	push(t);
	if(l > rq || r < lq) return;
	if(l >= lq && r <= rq) {
		t->lazy += v;
		push(t);
		return;
	}
	upd(t->l, l, (l + r) / 2, lq, rq, v);
	upd(t->r, (l + r) / 2 + 1, r, lq, rq, v);
	if(t->r->val <= t->l->val) {
		t->val = t->r->val;
		t->idx = t->r->idx;
	} else {
		t->val = t->l->val;
		t->idx = t->l->idx;
	}
}

pair<ll, int> query(node* v, int l, int r, int lq, int rq) {
	push(v);
	if(lq > r || l > rq) return {1e16, -1};
	if(lq <= l && r <= rq) return {v->val, v->idx};
	return min(
		query(v->l, l, (l + r) / 2, lq, rq),
		query(v->r, (l + r) / 2 + 1, r, lq, rq)
	);
}
endsnippet 

snippet casep "Case Print"
cout << "Case #" << t << ": ";
endsnippet


snippet Tree "SegTree"
struct Tree {
	using T = int;
	T ID = -1e9; // set ID such that f(ID, x) = x;
	T f(T a, T b) { return max(a, b); }
	vector<T> tree;
	int n;

	Tree() {}
	Tree(int _n) : n(_n) {
		int m = 1;
		while(m < n) m *= 2;
		tree.resize(2 * m, ID);
	}

	void update(int i, T val) { upd(1, 0, n - 1, i, val); }
	void upd(int x, int l, int r, int ind, T val) {
		if(ind > r || ind < l || r < l) return;
		if(l == r) { tree[x] = val; return; }
		upd(x + x, l, (l + r) / 2, ind, val);
		upd(x + x + 1, (l + r) / 2 + 1, r, ind, val);
		tree[x] = f(tree[x + x], tree[x + x + 1]);
	}

	T query(int l, int r) { return qry(1, 0, n - 1, l, r); }
	T qry(int x, int l, int r, int  ql, int qr) {
		if(qr < l || ql > r || r < l) return ID;
		if(ql <= l && qr >= r) return tree[x];
		return f(qry(x + x, l, (l + r) / 2, ql, qr),
				qry(x + x + 1, (l + r) / 2 + 1, r, ql, qr));
	}
};
endsnippet 

snippet TreeLazy "Segtree Lazy"
struct Tree {
	using T = int; // For Node Type
	using Q = int; // For Query Type
	using L = int; // For Lazy Type
	T ID = 0; // set ID such that f(ID, x) = x;
	T f(T a, T b) { return a + b; }
	vector<T> tree;
	vector<L> lazy;
	int n;

	Tree() {}
	Tree(int _n) : n(_n) {
		int m = 1;
		while(m < n) m *= 2;
		tree.resize(2 * m, ID);
		lazy.resize(2 * m, 0);
	}

	void push(int x, int l, int r) {
		if(!lazy[x]) return;
		tree[x] += (r - l + 1) * lazy[x];
		if(l != r) {
			lazy[2 * x] += lazy[x];
			lazy[2 * x + 1] += lazy[x];
		}
		lazy[x] = 0;
	}

	void update(int l, int r, L val) { upd(1, 0, n - 1, l, r, val); }
	void upd(int x, int l, int r, int ql, int qr, L val) {
		push(x, l, r);
		if(ql > r || qr < l) return;
		if(ql <= l && qr >= r) { lazy[x] += val; push(x, l, r); return; }
		upd(2 * x, l, (l + r) / 2, ql, qr, val);
		upd(2 * x + 1, (l + r) / 2 + 1, r, ql, qr, val);
		tree[x] = f(tree[2 * x], tree[2 * x + 1]);
	}

	Q query(int l, int r) { return qry(1, 0, n - 1, l, r); }
	Q qry(int x, int l, int r, int  ql, int qr) {
		push(x, l, r);
		if(qr < l || ql > r) return ID;
		if(ql <= l && qr >= r) {
			return tree[x];
		}
		return f(qry(2 * x, l, (l + r) / 2, ql, qr),
				qry(2 * x + 1, (l + r) / 2 + 1, r, ql, qr));
	}
};
endsnippet

snippet Elemination "Gaussian Elemination"
template<int SZ>
class E {
	static constexpr int N = SZ;
	int basis[N];
	int sz;

public:
	E() {
		sz = 0;
		fill(basis, basis + N, 0);
	}

	bool add(int x) {
		for(int i = 0; i < N; ++i) {
			if(!((x >> i) & 1)) continue;
			if(basis[i]) {
				x ^= basis[i];
			} else {
				basis[i] = x;
				sz++;
				return true;
			}
		}
		return false;
	}

	int get() {
		return sz;
	}
};
endsnippet
